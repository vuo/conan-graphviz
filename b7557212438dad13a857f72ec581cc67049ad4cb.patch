diff --git lib/common/utils.c lib/common/utils.c
index eb73b6e..aeb475e 100644
--- lib/common/utils.c
+++ lib/common/utils.c
@@ -1444,27 +1444,66 @@ htmlEntity (char** s)
     return n;
 }
 
+static unsigned char
+cvtAndAppend (unsigned char c, agxbuf* xb)
+{
+    char buf[2];
+    char* s;
+    char* p;
+    int len;
+
+    buf[0] = c;
+    buf[1] = '\0';
+
+    p = s = latin1ToUTF8 (buf);
+    len = strlen(s);
+    while (len-- > 1)
+	agxbputc(xb, *p++);
+    c = *p;
+    free (s);
+    return c;
+}
+
 /* substitute html entities like: &#123; and: &amp; with the UTF8 equivalents */
 char* htmlEntityUTF8 (char* s)
 {
+    static boolean warned = 0;
     char*  ns;
     agxbuf xb;
     unsigned char buf[BUFSIZ];
     unsigned char c;
     unsigned int v;
     int rc;
+    int uc;
+    int ui;
 
     agxbinit(&xb, BUFSIZ, buf);
 
     while ((c = *(unsigned char*)s++)) {
-        if (c < 0xC0) {
+        if (c < 0xC0)
 	    /*
 	     * Handles properly formed UTF-8 characters between
 	     * 0x01 and 0x7F.  Also treats \0 and naked trail
 	     * bytes 0x80 to 0xBF as valid characters representing
 	     * themselves.
 	     */
-	    if (c == '&') {
+            uc = 0;
+        else if (c < 0xE0)
+            uc = 1;
+        else if (c < 0xF0)
+            uc = 2;
+        else if (c < 0xF8)
+            uc = 3;
+        else {
+            uc = -1;
+            if (!warned) {
+                agerr(AGWARN, "UTF8 codes > 4 bytes are not currently supported - treated as Latin-1. Perhaps \"-Gcharset=latin1\" is needed?\n");
+                warned = 1;
+            }
+            c = cvtAndAppend (c, &xb);
+        }
+
+	    if (uc == 0 && c == '&') {
 		/* replace html entity sequences like: &amp;
 		 * and: &#123; with their UTF8 equivalents */
 	        v = htmlEntity (&s);
@@ -1481,35 +1520,22 @@ char* htmlEntityUTF8 (char* s)
 			c = (v & 0x3F) | 0x80;
 		    }
 		}
-            }
-	}
-        else if (c < 0xE0) { /* copy 2 byte UTF8 characters */
-	    if ((*s & 0xC0) == 0x80) {
-	        rc = agxbputc(&xb, c);
-	        c = *(unsigned char*)s++;
-	    }
-	    else {
-		agerr(AGERR, "Invalid 2-byte UTF8 found in input. Perhaps \"-Gcharset=latin1\" is needed?\n");
-		exit(EXIT_FAILURE);
-	    }
-	}
-	else if (c < 0xF0) { /* copy 3 byte UTF8 characters */
-	    if (((*s & 0xC0) == 0x80) && ((s[1] & 0xC0) == 0x80)) {
-	        rc = agxbputc(&xb, c);
-	        c = *(unsigned char*)s++;
-	        rc = agxbputc(&xb, c);
-	        c = *(unsigned char*)s++;
-	    }
-	    else {
-		agerr(AGERR, "Invalid 3-byte UTF8 found in input. Perhaps \"-Gcharset=latin1\" is needed?\n");
-		exit(EXIT_FAILURE);
-	    }
-	}
-	else  {
-	    agerr(AGERR, "UTF8 codes > 3 bytes are not currently supported. Or perhaps \"-Gcharset=latin1\" is needed?\n");
-	    exit(EXIT_FAILURE);
         }
-	rc = agxbputc(&xb, c);
+         else /* copy n byte UTF8 characters */
+             for (ui = 0; ui < uc; ++ui)
+                 if ((*s & 0xC0) == 0x80) {
+                     agxbputc(&xb, c);
+                     c = *(unsigned char*)s++;
+                 }
+                 else { 
+ 		            if (!warned) {
+ 		                agerr(AGWARN, "Invalid %d-byte UTF8 found in input - treated as Latin-1. Perhaps \"-Gcharset=latin1\" is needed?\n", uc + 1);
+ 		                warned = 1;
+ 		            }
+ 		            c = cvtAndAppend (c, &xb);
+                     break;
+ 	            }
+ 	    agxbputc(&xb, c);
     }
     ns = strdup (agxbuse(&xb));
     agxbfree(&xb);
